name: publish

on:
  push:
    branches-ignore: [ main ]
    # paths:
    #   - '.github/workflows/publish.yml'
  release:
    types: [ published ]
    
permissions:
  contents: write
  pull-requests: write

env:
  SOUNDIO_VERSION: 2.0.0 # This needs to be updated to match the SoundIO version being compiled.
  
jobs:
  prepare:
    runs-on: windows-latest

    outputs:
      version_number: ${{ steps.set_version_number.outputs.version_number }}
      version_suffix: ${{ steps.set_version_suffix.outputs.version_suffix }}
      full_version: ${{ steps.set_version_number.outputs.version_number }}${{ steps.set_version_suffix.outputs.version_suffix != '' && '-' || '' }}${{ steps.set_version_suffix.outputs.version_suffix }}

    steps:
      - name: Set version number
        id: set_version_number
        shell: bash
        run: echo "version_number=${{ env.SOUNDIO_VERSION }}" >> $GITHUB_OUTPUT

      - name: Set version suffix
        if: github.event.action != 'published'
        id: set_version_suffix
        shell: bash
        run: echo "version_suffix=preview.${{ github.run_number }}" >> $GITHUB_OUTPUT
  
  build-native:
    name: build (${{ matrix.platform.name }})
    runs-on: ${{ matrix.platform.runner }}-latest
    needs: prepare

    strategy:
      matrix:
        platform:
          - { name: win-x64,   runner: ubuntu }
          - { name: linux-x64, runner: ubuntu  }
      fail-fast: false
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout (SoundIO)
        uses: actions/checkout@v4
        with:
          repository: andrewrk/libsoundio
          ref: ${{ env.SOUNDIO_VERSION }}
          path: libsoundio

      - name: Install mingw32 (Windows)
        if: matrix.platform.name == 'win-x64'
        shell: bash
        run: |
          sudo apt-get -y install \
            mingw-w64 gcc-mingw-w64 g++-mingw-w64

      - name: Create temp folder
        shell: bash
        working-directory: libsoundio
        run: mkdir build

      - name: Write MinGW toolchain file
        if: matrix.platform.name == 'win-x64'
        shell: bash
        run: |
          cat <<EOF > $GITHUB_WORKSPACE/mingw-toolchain.cmake
          set(CMAKE_SYSTEM_NAME Windows)
          set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)
          set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)
          set(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)
          EOF
          
      - name: Configure (Windows)
        if: matrix.platform.name == 'win-x64'
        shell: bash
        working-directory: libsoundio/build
        run: |
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/mingw-toolchain.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/out

      - name: Configure (Linux)
        if: matrix.platform.name == 'linux-x64'
        shell: bash
        working-directory: libsoundio/build
        run: |
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/out

      - name: Build
        shell: bash
        working-directory: libsoundio/build
        run: make -j$(nproc)

      - name: Install
        shell: bash
        working-directory: libsoundio/build
        run: make install

      - name: Debug artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "debug-${{ matrix.platform.name }}"  
          path: "."

      # - name: Create staging folder
      #   shell: bash
      #   run: mkdir -p dist/runtimes/${{ matrix.platform.name }}/native

      # - name: Stage outputs (Linux)
      #   if: matrix.platform.name == 'linux-x64'
      #   shell: bash
      #   run: scripts/stage-so-libs.sh "dist/runtimes/${{ matrix.platform.name }}/native"

      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: "native-${{ matrix.platform.name }}"  
      #     path: "dist/"
  
  package:
    runs-on: windows-latest
    needs: [ prepare, build-native ]
    if: true == false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: Set up NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-api-key: ${{ secrets.NUGET_TOKEN }}
          nuget-version: latest

      - name: Package preview
        if: github.event.action != 'published'
        shell: pwsh
        run: nuget pack Hyjinx.SoundIO.native.nuspec -OutputDirectory ./out -Suffix "${{ needs.prepare.outputs.version_suffix }}" -Version "${{ needs.prepare.outputs.version_number }}"

      - name: Package release
        if: github.event.action == 'published'
        shell: pwsh
        run: nuget pack Hyjinx.SoundIO.native.nuspec -OutputDirectory ./out -Version "${{ needs.prepare.outputs.version_number }}"
        
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./out/*.nupkg
    
  publish:
    runs-on: windows-latest
    needs: package
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: dist/

      - name: Set up NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-api-key: ${{ secrets.NUGET_TOKEN }}
          nuget-version: latest
          
      - name: Push package(s)
        shell: powershell
        run: |
          Get-ChildItem -Path "dist" -Filter *.nupkg | ForEach-Object {
            Write-Host "Pushing $($_.FullName)"
            nuget push $_.FullName -Source https://api.nuget.org/v3/index.json
          }

  post-publish:
    runs-on: ubuntu-latest
    needs: [ prepare, publish ]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: dist/
          
      - name: Publish
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare.outputs.full_version }}
          artifacts: "dist/*.*"
          prerelease: ${{ github.event.action != 'published' }}
          generateReleaseNotes: ${{ github.event.action != 'published' }}
          allowUpdates: true
          omitBodyDuringUpdate: true
